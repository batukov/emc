//
// Created by diehigh on 17.09.18.
//

#include <stm32f405xx.h>
//#include <stm32f4xx_hal_tim.h>
#include "my_class.h"
#include "tim.h"
#include "stm32f4xx_hal.h"
#include "math.h"
#include "vector"
#include "algorithm"
#include "../Inc/my_class.h"


#define pi 3.1415926535F
extern volatile uint16_t ADC_data[4];
extern ADC_HandleTypeDef hadc1;
extern ADC_HandleTypeDef hadc2;
extern uint32_t tim4_counter;

__attribute__ ((section (".userRam")))
uint32_t sinful_array[100][51] = {
        0,2,3,4,6,7,9,10,12,13,14,15,16,17,18,19,20,21,22,22,23,23,24,24,24,24,24,24,24,23,23,22,22,21,20,19,19,18,16,15,14,13,12,10,9,7,6,5,3,2,0,
        0,2,4,5,7,9,10,12,13,15,16,18,19,20,22,23,24,25,25,26,27,27,27,28,28,28,28,28,27,27,27,26,25,25,24,23,22,20,19,18,16,15,14,12,10,9,7,5,4,2,0,
        0,2,4,6,8,10,12,14,15,17,19,20,22,23,25,26,27,28,29,30,30,31,31,32,32,32,32,32,31,31,30,30,29,28,27,26,25,23,22,20,19,17,15,14,12,10,8,6,4,2,0,
        0,2,5,7,9,11,13,15,17,19,21,23,25,26,28,29,30,32,33,33,34,35,35,36,36,36,36,36,35,35,34,33,33,32,30,29,28,26,25,23,21,19,17,15,13,11,9,7,5,2,0,
        0,3,5,7,10,12,15,17,19,21,24,25,27,29,31,32,34,35,36,37,38,39,39,40,40,40,40,40,39,39,38,37,36,35,34,32,31,29,27,26,24,21,19,17,15,12,10,8,5,3,0,
        0,3,6,8,11,14,16,19,21,24,26,28,30,32,34,36,37,39,40,41,42,43,43,44,44,44,44,44,43,43,42,41,40,39,37,36,34,32,30,28,26,24,21,19,16,14,11,8,6,3,0,
        0,3,6,9,12,15,18,20,23,26,28,31,33,35,37,39,41,42,43,45,46,46,47,48,48,48,48,48,47,47,46,45,43,42,41,39,37,35,33,31,28,26,23,20,18,15,12,9,6,3,0,
        0,3,7,10,13,16,19,22,25,28,31,33,36,38,40,42,44,46,47,48,49,50,51,52,52,52,52,52,51,50,49,48,47,46,44,42,40,38,36,33,31,28,25,22,19,16,13,10,7,3,0,
        0,4,7,10,14,17,21,24,27,30,33,36,38,41,43,45,47,49,51,52,53,54,55,56,56,56,56,56,55,54,53,52,51,49,47,45,43,41,38,36,33,30,27,24,21,17,14,11,7,4,0,
        0,4,8,11,15,19,22,26,29,32,35,38,41,44,46,49,51,53,54,56,57,58,59,60,60,60,60,60,59,58,57,56,54,53,51,49,46,44,41,38,35,32,29,26,22,19,15,11,8,4,0,
        0,4,8,12,16,20,24,27,31,34,38,41,44,47,49,52,54,56,58,60,61,62,63,63,64,64,64,63,63,62,61,60,58,56,54,52,49,47,44,41,38,34,31,27,24,20,16,12,8,4,0,
        0,4,9,13,17,21,25,29,33,36,40,43,47,50,52,55,57,60,62,63,65,66,67,67,68,68,68,67,67,66,65,63,62,60,57,55,52,50,47,43,40,37,33,29,25,21,17,13,9,4,0,
        0,5,9,13,18,22,26,31,35,39,42,46,49,52,55,58,61,63,65,67,68,70,71,71,72,72,72,71,71,70,68,67,65,63,61,58,56,53,49,46,42,39,35,31,27,22,18,14,9,5,0,
        0,5,10,14,19,23,28,32,37,41,45,48,52,55,59,61,64,67,69,71,72,74,75,75,76,76,76,75,75,74,72,71,69,67,64,62,59,55,52,48,45,41,37,32,28,24,19,14,10,5,0,
        0,5,10,15,20,25,29,34,39,43,47,51,55,58,62,65,68,70,72,74,76,77,79,79,80,80,80,79,79,78,76,74,72,70,68,65,62,58,55,51,47,43,39,34,30,25,20,15,10,5,0,
        0,5,11,16,21,26,31,36,40,45,49,54,57,61,65,68,71,74,76,78,80,81,82,83,84,84,84,83,82,81,80,78,76,74,71,68,65,61,58,54,49,45,41,36,31,26,21,16,11,5,0,
        0,6,11,16,22,27,32,37,42,47,52,56,60,64,68,71,74,77,80,82,84,85,86,87,88,88,88,87,86,85,84,82,80,77,74,71,68,64,60,56,52,47,43,38,32,27,22,17,11,6,0,
        0,6,12,17,23,28,34,39,44,49,54,59,63,67,71,74,78,81,83,86,87,89,90,91,92,92,92,91,90,89,87,86,83,81,78,75,71,67,63,59,54,49,44,39,34,29,23,17,12,6,0,
        0,6,12,18,24,30,35,41,46,51,56,61,66,70,74,78,81,84,87,89,91,93,94,95,96,96,96,95,94,93,91,89,87,84,81,78,74,70,66,61,57,52,46,41,35,30,24,18,12,6,0,
        0,6,13,19,25,31,37,43,48,54,59,64,68,73,77,81,84,88,91,93,95,97,98,99,100,100,100,99,98,97,95,93,91,88,85,81,77,73,69,64,59,54,48,43,37,31,25,19,13,6,0,
        0,7,13,19,26,32,38,44,50,56,61,66,71,76,80,84,88,91,94,97,99,101,102,103,104,104,104,103,102,101,99,97,94,91,88,84,80,76,71,66,61,56,50,44,38,32,26,20,13,7,0,
        0,7,14,20,27,33,40,46,52,58,64,69,74,79,83,87,91,95,98,100,103,105,106,107,108,108,108,107,106,105,103,100,98,95,91,87,83,79,74,69,64,58,52,46,40,33,27,20,14,7,0,
        0,7,14,21,28,35,41,48,54,60,66,71,77,82,86,91,95,98,101,104,107,108,110,111,112,112,112,111,110,109,107,104,101,98,95,91,86,82,77,71,66,60,54,48,41,35,28,21,14,7,0,
        0,7,15,22,29,36,43,49,56,62,68,74,79,85,89,94,98,102,105,108,110,112,114,115,116,116,116,115,114,112,110,108,105,102,98,94,89,85,79,74,68,62,56,50,43,36,29,22,15,7,0,
        0,8,15,22,30,37,44,51,58,64,71,76,82,87,92,97,101,105,109,112,114,116,118,119,120,120,120,119,118,116,114,112,109,105,101,97,93,88,82,77,71,64,58,51,44,37,30,23,15,8,0,
        0,8,16,23,31,38,46,53,60,66,73,79,85,90,95,100,105,109,112,115,118,120,122,123,124,124,124,123,122,120,118,115,112,109,105,100,96,91,85,79,73,67,60,53,46,38,31,23,16,8,0,
        0,8,16,24,32,40,47,55,62,69,75,82,88,93,99,104,108,112,116,119,122,124,126,127,128,128,128,127,126,124,122,119,116,112,108,104,99,93,88,82,75,69,62,55,47,40,32,24,16,8,0,
        0,8,17,25,33,41,49,56,64,71,78,84,90,96,102,107,111,116,119,123,126,128,130,131,132,132,132,131,130,128,126,123,119,116,112,107,102,96,90,84,78,71,64,56,49,41,33,25,17,8,0,
        0,9,17,25,34,42,50,58,66,73,80,87,93,99,105,110,115,119,123,126,129,132,134,135,136,136,136,135,134,132,129,126,123,119,115,110,105,99,93,87,80,73,66,58,50,42,34,26,17,9,0,
        0,9,18,26,35,43,52,60,67,75,82,89,96,102,108,113,118,123,127,130,133,136,137,139,140,140,140,139,137,136,133,130,127,123,118,113,108,102,96,89,82,75,68,60,52,43,35,26,18,9,0,
        0,9,18,27,36,44,53,61,69,77,85,92,98,105,111,116,122,126,130,134,137,139,141,143,144,144,144,143,141,140,137,134,130,126,122,117,111,105,99,92,85,77,70,61,53,45,36,27,18,9,0,
        0,9,19,28,37,46,54,63,71,79,87,94,101,108,114,120,125,130,134,138,141,143,145,147,148,148,148,147,145,143,141,138,134,130,125,120,114,108,101,94,87,79,71,63,55,46,37,28,19,9,0,
        0,10,19,28,38,47,56,65,73,81,89,97,104,111,117,123,128,133,138,141,145,147,149,151,152,152,152,151,149,147,145,141,138,133,128,123,117,111,104,97,90,82,73,65,56,47,38,29,19,10,0,
        0,10,20,29,39,48,57,66,75,84,92,99,107,114,120,126,132,137,141,145,148,151,153,155,156,156,156,155,153,151,148,145,141,137,132,126,120,114,107,100,92,84,75,67,58,48,39,29,20,10,0,
        0,10,20,30,40,49,59,68,77,86,94,102,109,117,123,129,135,140,145,149,152,155,157,159,160,160,160,159,157,155,152,149,145,140,135,130,123,117,110,102,94,86,77,68,59,50,40,30,20,10,0,
        0,10,21,31,41,51,60,70,79,88,96,104,112,120,126,133,138,144,148,153,156,159,161,163,164,164,164,163,161,159,156,153,148,144,139,133,126,120,112,105,97,88,79,70,61,51,41,31,21,10,0,
        0,11,21,31,42,52,62,72,81,90,99,107,115,122,129,136,142,147,152,156,160,163,165,167,168,168,168,167,165,163,160,156,152,147,142,136,130,123,115,107,99,90,81,72,62,52,42,32,21,11,0,
        0,11,22,32,43,53,63,73,83,92,101,110,118,125,132,139,145,151,156,160,164,166,169,171,172,172,172,171,169,167,164,160,156,151,145,139,133,126,118,110,101,92,83,73,63,53,43,33,22,11,0,
        0,11,22,33,44,54,65,75,85,94,103,112,120,128,136,142,149,154,159,164,167,170,173,175,176,176,176,175,173,171,167,164,159,154,149,143,136,128,121,112,104,95,85,75,65,55,44,33,22,11,0,
        0,11,23,34,45,56,66,77,87,96,106,115,123,131,139,146,152,158,163,167,171,174,177,179,180,180,180,179,177,174,171,167,163,158,152,146,139,131,123,115,106,97,87,77,66,56,45,34,23,12,0,
        0,12,23,34,46,57,68,78,89,99,108,117,126,134,142,149,155,161,167,171,175,178,181,183,184,184,184,183,181,178,175,171,167,161,155,149,142,134,126,117,108,99,89,79,68,57,46,35,23,12,0,
        0,12,24,35,47,58,69,80,91,101,111,120,129,137,145,152,159,165,170,175,179,182,185,186,188,188,188,186,185,182,179,175,170,165,159,152,145,137,129,120,111,101,91,80,69,58,47,36,24,12,0,
        0,12,24,36,48,59,71,82,93,103,113,122,131,140,148,155,162,168,174,179,183,186,189,190,192,192,192,190,189,186,183,179,174,168,162,156,148,140,132,122,113,103,93,82,71,60,48,36,24,12,0,
        0,12,25,37,49,61,72,83,94,105,115,125,134,143,151,159,165,172,177,182,186,190,192,194,196,196,196,194,192,190,186,182,177,172,166,159,151,143,134,125,115,105,95,84,72,61,49,37,25,13,0,
        0,13,25,37,50,62,74,85,96,107,118,127,137,146,154,162,169,175,181,186,190,194,196,198,200,200,200,198,196,194,190,186,181,175,169,162,154,146,137,128,118,107,97,85,74,62,50,38,25,13,0,
        0,13,26,38,51,63,75,87,98,109,120,130,140,149,157,165,172,179,185,190,194,197,200,202,204,204,204,202,200,198,194,190,185,179,172,165,157,149,140,130,120,110,99,87,75,63,51,39,26,13,0,
        0,13,26,39,52,64,77,89,100,111,122,132,142,152,160,168,176,182,188,193,198,201,204,206,208,208,208,206,204,202,198,193,188,182,176,168,160,152,142,133,123,112,100,89,77,64,52,39,26,13,0,
        0,13,27,40,53,66,78,90,102,114,125,135,145,155,163,172,179,186,192,197,202,205,208,210,212,212,212,210,208,205,202,197,192,186,179,172,163,155,145,135,125,114,102,91,78,66,53,40,27,14,0,
        0,14,27,40,54,67,79,92,104,116,127,138,148,157,166,175,182,189,195,201,205,209,212,214,216,216,216,214,212,209,205,201,195,189,183,175,167,158,148,138,127,116,104,92,80,67,54,41,27,14,0,
        0,14,28,41,55,68,81,94,106,118,129,140,150,160,169,178,186,193,199,205,209,213,216,218,220,220,220,218,216,213,209,205,199,193,186,178,170,161,151,140,130,118,106,94,81,68,55,42,28,14,0,
        0,14,28,42,56,69,82,95,108,120,132,143,153,163,172,181,189,196,203,208,213,217,220,222,224,224,224,222,220,217,213,208,203,196,189,181,173,164,153,143,132,120,108,96,83,69,56,42,28,14,0,
        0,14,29,43,57,70,84,97,110,122,134,145,156,166,176,184,192,200,206,212,217,221,224,226,228,228,228,226,224,221,217,212,206,200,193,185,176,166,156,145,134,122,110,97,84,71,57,43,29,15,0,
        0,15,29,43,58,72,85,99,112,124,136,148,159,169,179,188,196,203,210,216,221,225,228,230,232,232,232,230,228,225,221,216,210,203,196,188,179,169,159,148,137,125,112,99,86,72,58,44,29,15,0,
        0,15,30,44,59,73,87,101,114,126,139,150,161,172,182,191,199,207,214,219,224,228,232,234,236,236,236,234,232,229,224,219,214,207,199,191,182,172,162,151,139,127,114,101,87,73,59,45,30,15,0,
        0,15,30,45,60,74,88,102,116,129,141,153,164,175,185,194,203,210,217,223,228,232,236,238,240,240,240,238,236,233,228,223,217,210,203,194,185,175,164,153,141,129,116,102,89,74,60,45,30,15,0,
        0,15,31,46,61,75,90,104,118,131,143,155,167,178,188,197,206,214,221,227,232,236,240,242,244,244,244,242,240,236,232,227,221,214,206,198,188,178,167,156,144,131,118,104,90,76,61,46,31,16,0,
        0,16,31,46,62,77,91,106,120,133,146,158,170,181,191,201,209,217,224,231,236,240,244,246,248,248,248,246,244,240,236,231,224,217,210,201,191,181,170,158,146,133,120,106,92,77,62,47,31,16,0,
        0,16,32,47,63,78,93,107,121,135,148,161,172,184,194,204,213,221,228,234,240,244,247,250,251,252,251,250,247,244,240,234,228,221,213,204,194,184,173,161,148,135,122,108,93,78,63,48,32,16,1,
        0,16,32,48,64,79,94,109,123,137,151,163,175,187,197,207,216,224,232,238,243,248,251,254,255,256,255,254,251,248,243,238,232,225,216,207,197,187,175,163,151,137,124,109,94,79,64,48,33,16,1,
        0,16,33,49,65,80,96,111,125,139,153,166,178,190,200,210,219,228,235,242,247,252,255,258,259,260,259,258,255,252,247,242,235,228,220,211,200,190,178,166,153,140,126,111,96,81,65,49,33,17,1,
        0,17,33,49,66,82,97,112,127,142,155,168,181,192,203,214,223,231,239,246,251,256,259,262,263,264,263,262,259,256,251,246,239,232,223,214,204,193,181,168,155,142,128,113,97,82,66,50,34,17,1,
        0,17,34,50,67,83,99,114,129,144,158,171,183,195,206,217,226,235,243,249,255,259,263,266,267,268,267,266,263,260,255,249,243,235,226,217,207,196,184,171,158,144,129,114,99,83,67,51,34,17,1,
        0,17,34,51,68,84,100,116,131,146,160,173,186,198,209,220,230,238,246,253,259,263,267,270,271,272,271,270,267,264,259,253,246,239,230,220,210,199,186,174,160,146,131,116,100,84,68,51,35,17,1,
        0,17,35,52,69,85,102,118,133,148,162,176,189,201,213,223,233,242,250,257,262,267,271,274,275,276,275,274,271,267,262,257,250,242,233,224,213,201,189,176,163,148,133,118,102,86,69,52,35,18,1,
        0,18,35,52,70,87,103,119,135,150,165,178,192,204,216,227,236,245,253,260,266,271,275,278,279,280,279,278,275,271,266,260,253,246,237,227,216,204,192,179,165,150,135,120,103,87,70,53,36,18,1,
        0,18,36,53,71,88,105,121,137,152,167,181,194,207,219,230,240,249,257,264,270,275,279,282,283,284,283,282,279,275,270,264,257,249,240,230,219,207,195,181,167,153,137,121,105,88,71,54,36,18,1,
        0,18,36,54,72,89,106,123,139,154,169,183,197,210,222,233,243,252,261,268,274,279,283,286,287,288,287,286,283,279,274,268,261,253,243,233,222,210,197,184,170,155,139,123,106,89,72,54,37,18,1,
        0,18,37,55,73,90,107,124,141,157,172,186,200,213,225,236,246,256,264,272,278,283,287,290,291,292,291,290,287,283,278,272,264,256,247,237,225,213,200,186,172,157,141,125,108,91,73,55,37,19,1,
        0,19,37,55,74,91,109,126,143,159,174,189,202,216,228,239,250,259,268,275,281,287,291,294,295,296,295,294,291,287,281,275,268,260,250,240,228,216,203,189,174,159,143,126,109,92,74,56,38,19,1,
        0,19,38,56,75,93,110,128,145,161,176,191,205,219,231,243,253,263,272,279,285,290,295,298,299,300,299,298,295,291,285,279,272,263,254,243,231,219,206,191,177,161,145,128,111,93,75,57,38,19,1,
        0,19,38,57,76,94,112,130,147,163,179,194,208,222,234,246,257,266,275,283,289,294,299,302,303,304,303,302,299,295,289,283,275,267,257,246,234,222,208,194,179,163,147,130,112,94,76,57,39,19,1,
        0,19,39,58,77,95,113,131,148,165,181,196,211,225,237,249,260,270,279,286,293,298,302,306,307,308,307,306,302,298,293,286,279,270,260,249,237,225,211,197,181,165,149,132,114,95,77,58,39,20,1,
        0,20,39,58,78,96,115,133,150,167,183,199,213,227,240,252,263,273,282,290,297,302,306,310,311,312,311,310,306,302,297,290,282,274,264,253,241,228,214,199,184,168,151,133,115,97,78,59,40,20,1,
        0,20,40,59,79,98,116,135,152,169,186,201,216,230,243,256,267,277,286,294,301,306,310,313,315,316,315,313,310,306,301,294,286,277,267,256,244,231,216,202,186,170,153,135,117,98,79,60,40,20,1,
        0,20,40,60,80,99,118,136,154,172,188,204,219,233,246,259,270,280,290,298,304,310,314,317,319,320,319,317,314,310,304,298,290,281,270,259,247,234,219,204,188,172,155,137,118,99,80,60,41,20,1,
        0,20,41,61,81,100,119,138,156,174,191,206,222,236,249,262,273,284,293,301,308,314,318,321,323,324,323,321,318,314,308,301,293,284,274,262,250,237,222,207,191,174,156,138,120,100,81,61,41,21,1,
        0,21,41,61,82,101,121,140,158,176,193,209,224,239,253,265,277,287,297,305,312,318,322,325,327,328,327,325,322,318,312,305,297,288,277,266,253,239,225,209,193,176,158,140,121,102,82,62,42,21,1,
        0,21,42,62,83,103,122,141,160,178,195,211,227,242,256,269,280,291,300,309,316,321,326,329,331,332,331,329,326,322,316,309,300,291,281,269,256,242,227,212,196,178,160,142,123,103,83,63,42,21,1,
        0,21,42,63,84,104,124,143,162,180,198,214,230,245,259,272,284,294,304,312,320,325,330,333,335,336,335,333,330,326,320,312,304,295,284,272,259,245,230,214,198,180,162,143,124,104,84,64,43,22,1,
        0,21,43,64,85,105,125,145,164,182,200,217,233,248,262,275,287,298,308,316,323,329,334,337,339,340,339,337,334,329,323,316,308,298,287,275,262,248,233,217,200,183,164,145,125,105,85,64,43,22,1,
        0,22,43,64,86,106,127,147,166,184,202,219,235,251,265,278,290,301,311,320,327,333,338,341,343,344,343,341,338,333,327,320,311,302,291,279,265,251,236,219,203,185,166,147,127,107,86,65,44,22,1,
        0,22,44,65,87,108,128,148,168,187,205,222,238,254,268,282,294,305,315,324,331,337,342,345,347,348,347,345,342,337,331,324,315,305,294,282,268,254,238,222,205,187,168,149,128,108,87,66,44,22,1,
        0,22,44,66,88,109,130,150,170,189,207,224,241,257,271,285,297,308,319,327,335,341,346,349,351,352,351,349,346,341,335,327,319,309,297,285,271,257,241,225,207,189,170,150,130,109,88,67,45,23,1,
        0,22,45,67,89,110,131,152,172,191,209,227,244,260,274,288,300,312,322,331,339,345,350,353,355,356,355,353,350,345,339,331,322,312,301,288,274,260,244,227,210,191,172,152,131,110,89,67,45,23,1,
        0,23,45,67,90,111,132,153,174,193,212,229,246,262,277,291,304,315,326,335,342,348,354,357,359,360,359,357,354,349,342,335,326,316,304,292,278,263,247,230,212,193,174,154,133,112,90,68,46,23,1,
        0,23,46,68,91,112,134,155,175,195,214,232,249,265,280,294,307,319,329,339,346,352,357,361,363,364,363,361,357,353,346,339,329,319,308,295,281,266,249,232,214,195,176,155,134,113,91,69,46,23,1,
        0,23,46,69,92,114,135,157,177,197,216,234,252,268,283,298,311,322,333,342,350,356,361,365,367,368,367,365,361,357,350,342,333,323,311,298,284,269,252,235,217,198,178,157,136,114,92,70,47,24,1,
        0,23,47,70,93,115,137,158,179,199,219,237,254,271,286,301,314,326,337,346,354,360,365,369,371,372,371,369,365,360,354,346,337,326,314,301,287,272,255,237,219,200,180,159,137,115,93,70,47,24,1,
        0,24,47,70,94,116,138,160,181,202,221,240,257,274,290,304,317,329,340,350,358,364,369,373,375,376,375,373,369,364,358,350,340,330,318,305,290,274,258,240,221,202,182,161,139,117,94,71,48,24,1,
        0,24,48,71,95,117,140,162,183,204,223,242,260,277,293,307,321,333,344,353,361,368,373,377,379,380,379,377,373,368,361,353,344,333,321,308,293,277,260,242,224,204,184,162,140,118,95,72,48,24,1,
        0,24,48,72,96,119,141,164,185,206,226,245,263,280,296,311,324,336,348,357,365,372,377,381,383,384,383,381,377,372,365,357,348,337,324,311,296,280,263,245,226,206,185,164,142,119,96,73,49,25,1,
        0,24,49,73,97,120,143,165,187,208,228,247,265,283,299,314,327,340,351,361,369,376,381,385,387,388,387,385,381,376,369,361,351,340,328,314,299,283,266,248,229,208,187,166,143,120,97,73,49,25,1,
        0,25,49,73,98,121,144,167,189,210,230,250,268,286,302,317,331,343,355,365,373,379,385,389,391,392,391,389,385,380,373,365,355,344,331,318,302,286,269,250,231,211,189,167,145,122,98,74,50,25,1,
        0,25,50,74,99,122,146,169,191,212,233,252,271,289,305,320,334,347,358,368,377,383,389,393,395,396,395,393,389,384,377,368,358,347,335,321,305,289,271,253,233,213,191,169,146,123,99,75,50,25,1,
        0,25,50,75,100,124,147,170,193,214,235,255,274,292,308,324,338,350,362,372,380,387,393,397,399,400,399,397,393,388,380,372,362,351,338,324,308,292,274,255,236,215,193,171,148,124,100,76,51,26,1,
        0,25,51,76,101,125,149,172,195,217,238,257,276,295,311,327,341,354,366,376,384,391,397,401,403,404,403,401,397,391,384,376,366,354,341,327,311,295,277,258,238,217,195,173,149,125,101,76,51,26,1,
        0,26,51,76,102,126,150,174,197,219,240,260,279,297,314,330,344,357,369,379,388,395,401,405,407,408,407,405,401,395,388,379,369,358,345,330,315,298,279,260,240,219,197,174,151,126,102,77,52,26,1,
        0,26,52,77,103,127,152,176,199,221,242,262,282,300,317,333,348,361,373,383,392,399,405,409,411,412,411,409,405,399,392,383,373,361,348,334,318,301,282,263,243,221,199,176,152,128,103,78,52,26,1,
        0,26,52,78,104,129,153,177,201,223,245,265,285,303,320,337,351,364,376,387,396,403,409,413,415,416,415,413,409,403,396,387,376,365,352,337,321,304,285,265,245,223,201,178,154,129,104,79,53,27,1,
        0,26,53,79,105,130,155,179,202,225,247,268,287,306,323,340,354,368,380,391,399,407,412,417,419,420,419,417,412,407,399,391,380,368,355,340,324,307,288,268,247,226,203,179,155,130,105,79,53,27,1
};

__attribute__ ((section (".userRam")))
float sin_a[20] = {0, 0.0523, 0.1045, 0.1564, 0.2078, 0.2587, 0.3089, 0.3582, 0.4065, 0.4538, 0.4998, 0.5444, 0.5875, 0.6291, 0.6689, 0.7068, 0.7429, 0.7769, 0.8087, 0.8384};
float sin_b[20] = {0.8658, 0.8908, 0.9133, 0.9334, 0.9509, 0.9658, 0.978, 0.9876, 0.9944, 0.9986, 1, 0.9987, 0.9946, 0.9878, 0.9783, 0.9662, 0.9514, 0.9339, 0.914, 0.8915};
float sin_c[20] = {0.8666, 0.8393, 0.8097, 0.7779, 0.7439, 0.708, 0.67, 0.6303, 0.5888, 0.5457, 0.5011, 0.4552, 0.408, 0.3597, 0.3104, 0.2602, 0.2094, 0.1579, 0.1061, 0.0539};
float sin_d[20] = {0.0016, -0.0507, -0.1029, -0.1548, -0.2062, -0.2572, -0.3074, -0.3567, -0.4051, -0.4524, -0.4984, -0.5431, -0.5862, -0.6278, -0.6677, -0.7057, -0.7418, -0.7759, -0.8078, -0.8375};
float sin_e[20] = {-0.865, -0.89, -0.9127, -0.9328, -0.9504, -0.9653, -0.9777, -0.9873, -0.9943, -0.9985, -1, -0.9988, -0.9948, -0.9881, -0.9787, -0.9666, -0.9518, -0.9345, -0.9146, -0.8922};
float sin_f[20] = {-0.8673, -0.8401, -0.8106, -0.7789, -0.745, -0.7091, -0.6712, -0.6315, -0.5901, -0.5471, -0.5025, -0.4566, -0.4095, -0.3612, -0.3119, -0.2618, -0.2109, -0.1595, -0.1076, -0.0555};

float cos_a[20] = {0.9986, 0.9945, 0.9877, 0.9782, 0.966, 0.9511, 0.9336, 0.9136, 0.8911, 0.8662, 0.8388, 0.8092, 0.7774, 0.7434, 0.7074, 0.6694, 0.6297, 0.5882, 0.5451, 0.5005};
float cos_b[20] = {0.4545, 0.4073, 0.3589, 0.3096, 0.2595, 0.2086, 0.1571, 0.1053, 0.0531, 0.0008, -0.0515, -0.1037, -0.1556, -0.207, -0.2579, -0.3081, -0.3575, -0.4058, -0.4531, -0.4991};
float cos_c[20] = {-0.5437, -0.5869, -0.6284, -0.6683, -0.7063, -0.7423, -0.7764, -0.8083, -0.838, -0.8654, -0.8904, -0.913, -0.9331, -0.9506, -0.9655, -0.9778, -0.9875, -0.9944, -0.9985, -1};
float cos_d[20] = {-0.9987, -0.9947, -0.9879, -0.9785, -0.9664, -0.9516, -0.9342, -0.9143, -0.8918, -0.867, -0.8397, -0.8101, -0.7784, -0.7445, -0.7085, -0.6706, -0.6309, -0.5895, -0.5464, -0.5018};
float cos_e[20] = {-0.4559, -0.4087, -0.3604, -0.3111, -0.261, -0.2101, -0.1587, -0.1069, -0.0547, -0.0024, 0.0499, 0.1021, 0.154, 0.2055, 0.2564, 0.3066, 0.356, 0.4044, 0.4516, 0.4977};
float cos_f[20] = {0.5424, 0.5856, 0.6272, 0.6671, 0.7051, 0.7413, 0.7754, 0.8073, 0.8371, 0.8646, 0.8897, 0.9123, 0.9325, 0.9501, 0.9651, 0.9775, 0.9872, 0.9942, 0.9985, 1};

sin_cos get_sin_cos(float pos, int state){
    sin_cos result = {0.0F, 0.0F};
    int element = int(pos*20.0F) - 1;
    switch(state){
        case 0:
            result.sin_val = sin_a[element];
            result.cos_val = cos_a[element];
            break;
        case 1:
            result.sin_val = sin_b[element];
            result.cos_val = cos_b[element];
            break;
        case 2:
            result.sin_val = sin_c[element];
            result.cos_val = cos_c[element];
            break;
        case 3:
            result.sin_val = sin_d[element];
            result.cos_val = cos_d[element];
            break;
        case 4:
            result.sin_val = sin_e[element];
            result.cos_val = cos_e[element];
            break;
        case 5:
            result.sin_val = sin_f[element];
            result.cos_val = cos_f[element];
            break;
        default:
            break;
    }
    return result;
}

uint32_t get_sin(float ampl, float time){
    uint32_t x = uint32_t(ampl*100);
    uint32_t y = uint32_t(time*50);
    uint32_t aa = sinful_array[x][y];
    return aa;
}

my_class::my_class(int time){
    BaseType_t val = xTaskCreate( this->morgat_blyat,
                 "ya_mon",
                 15000,
                 (void *)this,
                 1,
                 nullptr );
    this->expected_switch_time = xTaskGetTickCount() + 1000;
    this->lasst_time = 0;
}

void my_class::kirhgoff(int val_1, int val_2) {

    this->cur_clear_1 = val_1-2048;
    this->cur_clear_2 = val_2-2048;
    this->cur_clear_3 = -val_1 - val_2 + 4096;
}

void my_class::forward_clark() {
    this->cur_a = (float)this->cur_clear_1;
    this->cur_b = 0.577*((float)this->cur_clear_1 + 2*(float)this->cur_clear_2);
}

void my_class::forward_park() {
    sin_cos aa = get_sin_cos(this->angle, this->state_handler);
    //this->cur_d =  this->cur_a*cosf(this->angle) + this->cur_b*sinf(this->angle);
    //this->cur_q = -this->cur_a*sinf(this->angle) + this->cur_b*cosf(this->angle);
    this->cur_d =  this->cur_a*aa.cos_val + this->cur_b*aa.sin_val;
    this->cur_q = -this->cur_a*aa.sin_val + this->cur_b*aa.cos_val;
    //int hhasdh = 0;
}
void my_class::pid_d() {
    float delta = target_d - this->cur_d;
    this->vol_d_p = delta * P_d + this->vol_d_i * I_d;
    this->vol_d_i += delta;
}
void my_class::pid_q() {
    float delta = target_q - this->cur_q;
    this->vol_q_p = delta * P_q + this->vol_q_i * I_q;
    this->vol_q_i += delta;
}
void my_class::backward_park() {
    sin_cos aa = get_sin_cos(this->angle, this->state_handler);
    this->vol_d_sup = vol_d_p*aa.cos_val - vol_q_p*aa.sin_val;
    this->vol_q_sup = vol_d_p*aa.sin_val + vol_q_p*aa.cos_val;
    //this->vol_d_sup = vol_d_p*cosf(this->angle) - vol_q_p*sinf(this->angle);
    //this->vol_q_sup = vol_d_p*sinf(this->angle) + vol_q_p*cosf(this->angle);
}
void my_class::backward_clark() {
    this->vol_a =  this->vol_d_sup;
    this->vol_b = -0.5F*this->vol_d_sup + 0.865F*this->vol_q_sup;
    this->vol_c = -0.5F*this->vol_d_sup - 0.865F*this->vol_q_sup;
}
int my_class::compare(const void * x1, const void * x2)   // функция сравнения элементов массива
{
    return ( *(float*)x1 - *(float*)x2 );              // если результат вычитания равен 0, то числа равны, < 0: x1 < x2; > 0: x1 > x2
}
float my_class::median_filter(float* array, int array_size){
    float temp_array[array_size];
    memcpy(temp_array, array, sizeof(float)*array_size);
    qsort(temp_array,array_size,sizeof(float), this->compare);
    return temp_array[int(array_size/2) - 1];
}
void my_class::set_width_new_way(float ampl, float time, int channel) {
    float changed_time = time*0.5F;
    switch(channel) {
        case 0:
            htim1.Instance->CCR1 = 0;
            htim1.Instance->CCR2 = get_sin(ampl, (changed_time + 0.5F));
            htim1.Instance->CCR3 = get_sin(ampl, changed_time);
            break;
        case 1:
            htim1.Instance->CCR1 = get_sin(ampl, changed_time);
            htim1.Instance->CCR2 = 0;
            htim1.Instance->CCR3 = get_sin(ampl, (changed_time + 0.5F));
            break;
        case 2:
            htim1.Instance->CCR1 = get_sin(ampl, (changed_time+ 0.5F));
            htim1.Instance->CCR2 = get_sin(ampl, changed_time);
            htim1.Instance->CCR3 = 0;
            break;
    }
}

void State::set_next_state(State* next)
{
    this->next_state = next;
}



void my_class::morgat_blyat(void *pvParameters){
    const int buf_size = 1000;
    int buf_counter = 0;

    float temp_1[500] = {0.0F};
    float temp_2[500] = {0.0F};
    float temp_3[500] = {0.0F};
    float temp_4[500] = {0.0F};
    //float temp_4[1000] = {0.0F};
    int temp_counter = 0;

    uint32_t  adc[4] = {0};
    uint32_t  adc_v[4] = {0};
    float amplitude = 0.1F;
    uint32_t current_adc[buf_size] = {0};

    my_class *obj = (my_class * )pvParameters;

    //State TEST(1,0,-1,false, nullptr);

    State F( 1, 0,-1, false, nullptr, 5);
    State E( 0, 1,-1, true,  &F, 4);
    State D(-1, 1, 0, false, &E, 3);
    State C(-1, 0, 1, true,  &D, 2);
    State B( 0,-1, 1, false, &C, 1);
    State A( 1,-1, 0, true,  &B, 0);
    F.set_next_state(&A);

    State* current_state = &A;
    obj->state_handler = current_state->state_h;

    HAL_GPIO_WritePin(GPIOC,GPIO_PIN_10,GPIO_PIN_SET);
    HAL_GPIO_WritePin(GPIOB,GPIO_PIN_12,GPIO_PIN_RESET);


    // нессущая чистота 84000, предделитель 8399, период 10000,длина импульса всякая там
    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);    //starts PWM on CH1 pin
    HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1); //starts PWM on CH1N pin

    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);    //starts PWM on CH1 pin
    HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2); //starts PWM on CH1N pin

    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);    //starts PWM on CH1 pin
    HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_3); //starts PWM on CH1N pin

    htim1.Instance->CCR1 = 0;
    htim1.Instance->CCR2 = 0;
    htim1.Instance->CCR3 = 0;

    TickType_t end_time = 0;

    uint32_t expected_switch_time_t = 0;
    float period = 1;
    uint32_t current_time = 0;
    float pos_on_period = 0.0F;
    period = 2500;
    //State Test_one(0,0,0,false,nullptr);
    uint32_t switch_time = 0;
    const int adc_array_size = 7;
    float adc_array_a[adc_array_size] = {0.0F};
    float adc_array_b[adc_array_size] = {0.0F};
    int adc_array_counter = 0;
    bool do_switch = false;
    int add_counter = 0;
    while(1)
    {
        if(!do_switch) {


            adc_v[0] = ADC1->JDR4;
            adc_v[1] = ADC1->JDR3;//3
            adc_v[2] = ADC1->JDR2;//2
            adc_v[3] = ADC1->JDR1;//1
            ADC1->CR2 |= ADC_CR2_JSWSTART;

            adc[0] = ADC2->JDR1;
            adc[1] = ADC2->JDR2;
            ADC2->CR2 |= ADC_CR2_JSWSTART;

            /*current_adc[buf_counter] = adc[0];
            buf_counter++;
            if(buf_counter == buf_size)
            {
                buf_counter = 0;
            }
    */

            temp_1[temp_counter] = adc_v[1];
            temp_2[temp_counter] = adc_v[2];
            temp_3[temp_counter] = adc_v[3];
            temp_4[temp_counter] = htim1.Instance->CCR1;
            adc_array_a[adc_array_counter] = adc[0];
            adc_array_b[adc_array_counter] = adc[1];
            adc_array_counter++;
            if (adc_array_counter == adc_array_size) { adc_array_counter = 0; }
            //temp_1[temp_counter] = adc[0];
            //temp_2[temp_counter] = adc[1];
            //temp_counter++;


            current_time = get_time();
            pos_on_period = (((float) current_time - (float) end_time) / (float) period);
            if (pos_on_period > 1.0F) { pos_on_period = 1.0F; }
            obj->angle = pos_on_period;
            float val_1 = obj->median_filter(adc_array_a, adc_array_size);
            float val_2 = obj->median_filter(adc_array_b, adc_array_size);
            //obj->kirhgoff(adc[0], adc[1]);
            obj->kirhgoff(val_1, val_2);
            obj->forward_clark();
            obj->forward_park();
            obj->pid_d();
            obj->pid_q();
            obj->backward_park();
            obj->backward_clark();

            //temp_1[temp_counter] = obj->vol_a + 0.4F;// + 220;
            //temp_2[temp_counter] = obj->vol_b + 0.6F;// + 550;
            //temp_3[temp_counter] = obj->vol_c - 1.0F;// + 90;
            //temp_1[temp_counter] = obj->cur_d;// + 90;
            //temp_2[temp_counter] = obj->cur_q;
            //temp_1[temp_counter] = obj->cur_q;
            //temp_1[temp_counter] = htim1.Instance->CCR1;
            //temp_1[temp_counter] = val_1;
            //temp_2[temp_counter] = adc[0];
            temp_counter++;
            if (temp_counter == 500) {
                temp_counter = 0;
                add_counter++;
            }


            obj->set_width_new_way(amplitude, pos_on_period, current_state->wiring);
            //obj->set_state(current_state);
            if (current_time >= expected_switch_time_t) {
                current_state = current_state->next_state;
                obj->state_handler = current_state->state_h;
                expected_switch_time_t = current_time + period;
                end_time = current_time;
                switch_time = end_time;
                if(add_counter > 10)
                {do_switch = false;}
            }
        }else{
            adc_array_a[adc_array_counter] = adc[0];
            adc_array_b[adc_array_counter] = adc[1];
            adc_array_counter++;
            if (adc_array_counter == adc_array_size) { adc_array_counter = 0; }
            //temp_1[temp_counter] = adc[0];
            //temp_2[temp_counter] = adc[1];
            //temp_counter++;


            current_time = get_time();
            pos_on_period = (((float) current_time - (float) end_time) / (float) period);
            if (pos_on_period > 1.0F) { pos_on_period = 1.0F; }
            obj->angle = pos_on_period;
            float val_1 = obj->median_filter(adc_array_a, adc_array_size);
            float val_2 = obj->median_filter(adc_array_b, adc_array_size);
            obj->kirhgoff(val_1, val_2);
            obj->forward_clark();
            obj->forward_park();
            obj->pid_d();
            obj->pid_q();
            obj->backward_park();
            obj->backward_clark();

            obj->vol_a += 4.4F;//0.4F;
            obj->vol_b += 4.6F;//0.6F;
            obj->vol_c += 3.0F;//-= 1.0F;

            obj->vol_a *= 20;
            obj->vol_b *= 20;
            obj->vol_c *= 20;
            if(obj->vol_c < 0){obj->vol_c = 0;}

            htim1.Instance->CCR1 = (int)obj->vol_a;
            htim1.Instance->CCR2 = (int)obj->vol_b;
            htim1.Instance->CCR3 = (int)obj->vol_c;
        }
    }
}